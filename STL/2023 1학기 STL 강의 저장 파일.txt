

==================================
소스.cpp, 저장 시간: 2023-03-03 금요일 오후 12:20:43
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 2일 목78                화 910 목78               (1주 1일)
//-----------------------------------------------------------------------------
// vs 환경: release 모드/x64 >> 포인터 크기 8바이트, Project 환경: C++ 언어 latest, SDL-아니오
//-----------------------------------------------------------------------------
// 한학기 강의를 파일에 저장할 수 있는 코딩 >> save 파일
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <vector>
#include <chrono>

void save(const std::string& fileName);

int main() {
	std::cout << "2023 STL" << '\n'; // \n << endl과 같은 기능.

	save("소스.cpp");
}

void save(const std::string& fileName)
{
	//fileName을 읽기 모드로 열기
	std::ifstream in{ fileName };

	//char c;
	//in >> std::noskipws; //공백, 엔터 스킵하지 마라
	//while (in >> c) {
	//	std::cout << c;
	//}

	//저장 파일을 덧붙여 쓰기 모드로 열기
	std::ofstream out{ "2023 1학기 STL 강의 저장 파일.txt", std::ios::app };

	//저장 시간을 파일에 기록한다.
	auto now = std::chrono::system_clock::now();			//time_point
	auto utc = std::chrono::system_clock::to_time_t(now);	//UTC 시간으로 변환
	auto lt = localtime(&utc);								//로컬 시간으로 변환

	auto old = out.imbue(std::locale("KO_kr"));		//로캘 변환



	//한국 형식으로 날짜 출력
	out << '\n' << '\n';
	out << "==================================" << '\n';
	out << fileName << std::put_time(lt, ", 저장 시간: %x %A %X") << '\n';
	out << "==================================" << '\n';


	std::cout.imbue(old);									//로캘 복구

	//fileName에 있는 모든 내용을 읽어 저장할 파일에 쓰기
	//STL의 자료구조와 알고리즘을 이용하여 저장하기

	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//std::vector<char> v{ 파일의 시작, 파일의 끝 };
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

	//in.close() 쓰지 않아도 됨. 알아서 소멸자를 부르기 때문 >> RTTI. *****파일 스트림 공부 더하기*****
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 5:36:52
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910               화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// vs 환경: release 모드/x64 >> 포인터 크기 8바이트, Project 환경: C++ 언어 latest, SDL-아니오
//-----------------------------------------------------------------------------
// 한학기 강의를 파일에 저장할 수 있는 코딩 >> save 파일
// save() 함수를 파일로 분리한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"



int main() {
	std::cout << "2023 STL" << '\n'; // \n << endl과 같은 기능.

	using namespace std::string_literals;
	save("소스.cpp"s);
}


==================================
save.h, 저장 시간: 2023-03-07 화요일 오후 5:48:27
==================================
//-------------------------------------------------------------------------
// save.h 한 학기 강의를 저장한다.
// #pragma once >> 두 번 인클루드 하지 말아라.
//-------------------------------------------------------------------------
// #pragma once

#ifndef MY_SAVE_FILE
#define MY_SAVE_FILE

#include <iostream>
#include <fstream>
#include <vector>
#include <chrono>

void save(const std::string& fileName);

#endif 

==================================
save.cpp, 저장 시간: 2023-03-07 화요일 오후 5:48:28
==================================
//-------------------------------------------------------------------------
// save.cpp 한 학기 강의를 저장한다.
//-------------------------------------------------------------------------
#include <string>
#include <fstream>
#include <chrono>
#include "save.h"

void save(const std::string& fileName)
{
	//fileName을 읽기 모드로 열기
	std::ifstream in{ fileName };

	//char c;
	//in >> std::noskipws; //공백, 엔터 스킵하지 마라
	//while (in >> c) {
	//	std::cout << c;
	//}

	//저장 파일을 덧붙여 쓰기 모드로 열기
	std::ofstream out{ "2023 1학기 STL 강의 저장 파일.txt", std::ios::app };

	//저장 시간을 파일에 기록한다.
	auto now = std::chrono::system_clock::now();			//time_point
	//using namespace std::literals::chrono_literals;
	//std::cout << "현재 시간 - " << now + 9h << '\n';

	auto utc = std::chrono::system_clock::to_time_t(now);	//UTC 시간으로 변환
	auto lt = localtime(&utc);								//로컬 시간으로 변환
	auto old = out.imbue(std::locale("KO_kr"));				//로캘 변환



	//한국 형식으로 날짜 출력
	out << '\n' << '\n';
	out << "==================================" << '\n';
	out << fileName << std::put_time(lt, ", 저장 시간: %x %A %X") << '\n';
	out << "==================================" << '\n';


	std::cout.imbue(old);									//로캘 복구

	//fileName에 있는 모든 내용을 읽어 저장할 파일에 쓰기
	//STL의 자료구조와 알고리즘을 이용하여 저장하기

	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//std::vector<char> v{ 파일의 시작, 파일의 끝 };
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

	//in.close() 쓰지 않아도 됨. 알아서 소멸자를 부르기 때문 >> RAII. *****파일 스트림 공부 더하기*****
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 5:48:28
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 2일 목78                화 910 목78               (1주 1일)
//-----------------------------------------------------------------------------
// vs 환경: release 모드/x64 >> 포인터 크기 8바이트, Project 환경: C++ 언어 latest, SDL-아니오
//-----------------------------------------------------------------------------
// 한학기 강의를 파일에 저장할 수 있는 코딩 >> save 파일
// save() 함수를 파일로 분리한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

int main() {
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 6:00:39
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910                화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// C++ template 복습
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std; //권장하지 않음.

//[문제] 의도대로 실행되도록 코딩하라. main() 안의 내용은 변경 금지

void change(int&, int& );

//-------------
int main() {
//-------------

	int a{ 1 }, b{ 2 };
	change( a, b );
	cout << a << ", " << b << '\n';		//2, 1
	save("소스.cpp");
}

void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 6:20:07
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910                화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// C++ template 복습
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std; //권장하지 않음.

//[문제] 의도대로 실행되도록 코딩하라. main() 안의 내용은 변경 금지
class Dog {
public:
	int n;
	Dog(int a) {
		n = a;
	}
};

void change(Dog&, Dog& );
void change(int&, int&);
//-------------
int main() {
//-------------
	{
		Dog a{ 1 }, b{ 2 };
		change( a, b );
		cout << a.n << ", " << b.n << '\n';		//2, 1
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		//2, 1
	}
	save("소스.cpp");
}

void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}
void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 6:27:34
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910                화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// C++ template 복습
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std; //권장하지 않음.

//[문제] 의도대로 실행되도록 코딩하라. main() 안의 내용은 변경 금지

class Dog {
	int n;
public:
	Dog(int n) : n{ n } {
	}
	//출력 함수 오버로딩 필요!! (***오퍼레이터 오버로딩 다시 공부하기***)
	friend ostream& operator<<(ostream& os, const Dog& Dog) {
		return os << Dog.n;
	}
};

// 함수 오버로딩
void change(Dog&, Dog& );
void change(int&, int&);
 
//-------------
int main() {
//-------------
	{

		Dog a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << '\n';		//2, 1
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		//2, 1
	}
	save("소스.cpp");
}

void change(Dog& a, Dog& b) {
	Dog temp{ a };
	a = b;
	b = temp;
}
void change(int& a, int& b) {
	int temp{ a };
	a = b;
	b = temp;
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 6:39:01
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910                화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// C++ template 복습
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std; //권장하지 않음.

//[문제] 의도대로 실행되도록 코딩하라. main() 안의 내용은 변경 금지
// change 함수를 한 번만 코딩해서 할 수 있나?

class Dog {
	int n;
public:
	Dog(int n) : n{ n } {
	}
	//출력 함수 오버로딩 필요!! (***오퍼레이터 오버로딩 다시 공부하기***)
	friend ostream& operator<<(ostream& os, const Dog& Dog) {
		return os << Dog.n;
	}
};

template <class T>
void change( T&, T&);

// 함수 오버로딩
// void change(Dog&, Dog&);
// void change(Monster&, Monster&);
 
//-------------
int main() {
//-------------
	{

		Dog a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << '\n';		//2, 1
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		//2, 1
	}
	save("소스.cpp");
}

template <class T>
void change(T& a, T& b) {
	T temp{ a };							//special 함수 (복사 생성자, 생성자, 소멸자, 이퀄... 그다음이 먼데)
	a = b;									//special 함수 a.operator=(b);와 같은 문장.
	b = temp;
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 6:43:46
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910                화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// C++ template 복습
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std; //권장하지 않음.

//[문제] 의도대로 실행되도록 코딩하라. main() 안의 내용은 변경 금지
// change 함수를 한 번만 코딩해서 할 수 있나?

class Dog {
	int n;
public:
	Dog(int n) : n{ n } {
	}

	friend ostream& operator<<(ostream& os, const Dog& Dog) {	//출력 함수 오버로딩 필요!! (***오퍼레이터 오버로딩 다시 공부하기***)
		return os << Dog.n;
	}
};

//-------------------------------------------------------------------------------------------
// 함수 오버로딩 >> 자료형의 개수는 무한대임. 따라서 탬플릿으로 하나의 함수만 만들어야 됨.
// void change(Dog&, Dog&);
// void change(Monster&, Monster&);
//-------------------------------------------------------------------------------------------

template <class T>
void change( T&, T&);
 
//-------------
int main() {
//-------------
	{
		Dog a{ 1 }, b{ 2 };
		change( a, b );						// 1. change( Dog, Dog);
											// 2. change( Dog&, Dog&);
											// 3. 템플릿으로 코드 생성.
		cout << a << ", " << b << '\n';		//2, 1
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		//2, 1
	}
	save("소스.cpp");
}

template <class T>
void change(T& a, T& b) {
	T temp{ a };							//special 함수 (복사 생성자, 생성자, 소멸자, 이퀄... 그다음이 먼데)
	a = b;									//special 함수 a.operator=(b);와 같은 문장.
	b = temp;
}

==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 7:02:13
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910                화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// C++ template 복습
//-----------------------------------------------------------------------------
// C++의 패러다임 (C++이 뭔데!)
// 1. procedual PL(C)
// 2. object oriented PL(programming Language) (C++) >> 객체 간의 관계가 중요함. (상속, 친구 등등...) >> OOP
// ** 3. generic PL <OOP와 반대임...?> (C++) 자료형과 무관함!!! >>(템플릿으로 구성된...) 함수(알고리즘), 클래스(자료구조) <<< 독보적임.
// 4. template meta PL >> 프로그램을 생성하는 프로그램. <<< 독보적임. meta는 신급임.
// 5. Functional PL
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

//[문제] 의도대로 실행되도록 코딩하라. main() 안의 내용은 변경 금지
// change 함수를 한 번만 코딩해서 할 수 있나?

// 템플릿 함수는 선언과 정의를 따로 하지 않고 한 번에 함. <<선언과 동시에 정의!!>>
// 소스 코드를 컴파일러가 언제나 알 수 있도록 정의를 열어둬야 함. (먼저 정의해야 함.)
// **요약: 템플릿의 선언과 정의는 한 번에! - 템플릿 소스는 컴파일러가 언제나 알고 있어야 하기 때문.
template <class T>
void change(T& a, T& b) {
	T temp{ a };							//special 함수 (복사 생성자, 생성자, 소멸자, 이퀄... 그다음이 먼데)
	a = b;									//special 함수 a.operator=(b);와 같은 문장.
	b = temp;
}

//-------------
int main() {
//-------------

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-07 화요일 오후 10:28:22
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 화910                화 910 목78               (1주 2일)
//-----------------------------------------------------------------------------
// C++ template 복습
//-----------------------------------------------------------------------------
// C++의 패러다임 (C++이 뭔데!)
// 1. procedual PL(C)
// 2. object oriented PL(programming Language) (C++) >> 객체 간의 관계가 중요함. (상속, 친구 등등...) >> OOP
// ** 3. generic PL <OOP와 반대임...?> (C++) 자료형과 무관함!!! >>(템플릿으로 구성된...) 함수(알고리즘), 클래스(자료구조) <<< 독보적임.
// 4. template meta PL >> 프로그램을 생성하는 프로그램. <<< 독보적임. meta는 신급임.
// 5. Functional PL
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

//[문제] 의도대로 실행되도록 코딩하라. main() 안의 내용은 변경 금지
// change 함수를 한 번만 코딩해서 할 수 있나?

// 템플릿 함수는 선언과 정의를 따로 하지 않고 한 번에 함. <<선언과 동시에 정의!!>>
// 소스 코드를 컴파일러가 언제나 알 수 있도록 정의를 열어둬야 함. (먼저 정의해야 함.)
// **요약: 템플릿의 선언과 정의는 한 번에! - 템플릿 소스는 컴파일러가 언제나 알고 있어야 하기 때문.
template <class T>
void change(T& a, T& b) {
	T temp{ a };							//special 함수 (복사 생성자, 생성자, 소멸자, 이퀄... 그다음이 먼데)
	a = b;									//special 함수 a.operator=(b);와 같은 문장.
	b = temp;
}

//-------------
int main() {
	//-------------

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:38:00
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;



//
//-------------
int main() {
//-------------
	uniform_int_distribution uid;

	cout << uid(dre);

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:46:56
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid;

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << uid(dre) << '\t';
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:49:03
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid;

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:20}", uid(dre));
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:49:57
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid;

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:20}", uid(dre));
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:50:01
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid;

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:20}", uid(dre));
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:50:15
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid;

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:20}", uid(dre));
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:50:50
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid;

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:10}", uid(dre));
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:51:34
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:8}", uid(dre));
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:52:12
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:<8}", uid(dre));
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:52:35
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:^80}", uid(dre));
//		
	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:54:05
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 화면에 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };

	// coding convention

	for (int i = 0; i < 1'000; ++i) {
		cout << format("{:8}", uid(dre));
//		cout << format("{:8}", uid(dre)); 디폴트값. 오른쪽으로 정렬
//		cout << format("{:<8}", uid(dre)); 왼쪽으로 정렬
//		cout << format("{:^8}", uid(dre)); 가운데로 정렬

	}
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 3:56:48
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하고 출력했다.
// 가장 큰 숫자는 무엇인지 출력하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };

	// coding convention

	int max = 0;
	int k = 0;
	for (int i = 0; i < 1'000; ++i) {
		k = uid(dre);
		cout << format("{:8}", k);
		if (max < k) {
			max = k;
		}
	}
	cout << max;
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:05:54
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 파일에 저장하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };

	// coding convention

// int 값 중 가장 작은 값. numeric_limits<int>::min()
	int max = numeric_limits<int>::min(); 
	
	for (int i = 0; i < 1'000; ++i) {
		int n = uid(dre);
//		cout << format("{:8}", n);
		if (max < n) {
			max = n;
		}
	}
	cout << max;
	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:10:31
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <fstream>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 파일 "int 천개"에 저장하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };
	
//	객체 생성과 동시에 초기화. RAII 
	ofstream out{ "int 천개" }; 

	for (int i = 0; i < 1'000; ++i) {
		out << format("{:8}",uid(dre));
	}

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:11:20
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <fstream>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개를 생성하여 파일 "int 천개"에 저장하라.

default_random_engine dre;

//-------------
int main() {
	//-------------
	uniform_int_distribution uid{ 1, 99'999 };
	
//	객체 생성과 동시에 초기화. RAII 
	ofstream out{ "int 천개.txt" }; 

	for (int i = 0; i < 1'000; ++i) {
		out << format("{:8}",uid(dre));
	}

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:15:47
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개가 파일 "int 천개"에 저장되어있다.
// 파일을 읽어 int 값을 화면에 출력하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

	char c;
	while (in >> c) {
		cout << c;
	}

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:20:33
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개가 파일 "int 천개"에 저장되어있다.
// 파일을 읽어 int 값을 화면에 출력하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	int n;
	in >> std::noskipws;
	for (int i = 0; i < 1'000; ++i) {
		in >> n;
		cout << format("{:8}", n);
	}

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:20:48
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 int 1'000개가 파일 "int 천개"에 저장되어있다.
// 파일을 읽어 int 값을 화면에 출력하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	int n;

	for (int i = 0; i < 1'000; ++i) {
		in >> n;
		cout << format("{:8}", n);
	}

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:37:40
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] 임의의(random) 값을 갖는 몇 개인지 모르는 int가 파일 "int 천개"에 저장되어있다.
// int값은 글자 형식으로 빈칸으로 구분되어 저장되어 있다.
// 파일을 읽어 int 값을 화면에 출력하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	int n;

	// 개수 모를 때
	while (in >> n) {
		cout << format("{:8}", n);
	}

	// 개수 알 때
	//for (int i = 0; i < 1'000; ++i) {
	//	in >> n;
	//	cout << format("{:8}", n);
	//}

	save("소스.cpp");
}



==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:50:42
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] int 1'000개가 파일 "int 천개"에 저장되어있다.
// int값은 글자 형식으로 빈칸으로 구분되어 저장되어 있다.
// int 1000개를 메모리에 저장하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

	// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	// (배열) int ary[1'000] = {};					//contiguous memory
	// 컴파일 시, 크기가 결정되어 있을 때만 사용 가능함. 결정되어 있지 않다면 동적 메모리 사용하기.
	array<int, 1000> a;
	cout << sizeof(a) << endl;
	int n;

	for (int i = 0; i < 1000; i++) {
		in >> a[i];
	}


	save("소스.cpp");
}

// contiguous memory >> 빈 공간이 없는 메모리라는 뜻.
// continuous << 시간의 연속됨, contiguous << 공간이 연속됨.
// 담고자하는 메모리 그대로만 메모리를 사용함. 탐색을 위한 시간 복잡도 또한 O(1).
// ㄴ 크기 절약, 시간 절약. >> 하지만,,, 추가 및 삭제가 어려움.
// ㄴ 사용은 자제하자. 원시적인 배열. >>>>>>>>>> 자료구조 'array'를 사용하자.
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:52:31
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] int 1'000개가 파일 "int 천개"에 저장되어있다.
// int값은 글자 형식으로 빈칸으로 구분되어 저장되어 있다.
// int 1000개를 메모리에 저장하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

	// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	// (배열) int ary[1'000] = {};					//contiguous memory
	// 컴파일 시, 크기가 결정되어 있을 때만 사용 가능함. 결정되어 있지 않다면 동적 메모리 사용하기.
	// cout << sizeof(a) << endl; 크기 또한 4000으로 배열과 같음.
	
	array<int, 1000> a;
	
	for (int i = 0; i < 1000; i++) {
		in >> a[i];
	}

	for (int n : a) {
		cout << format("{:8}", n);
	}
	save("소스.cpp");
}

// contiguous memory >> 빈 공간이 없는 메모리라는 뜻.
// continuous << 시간의 연속됨, contiguous << 공간이 연속됨.
// 담고자하는 메모리 그대로만 메모리를 사용함. 탐색을 위한 시간 복잡도 또한 O(1).
// ㄴ 크기 절약, 시간 절약. >> 하지만,,, 추가 및 삭제가 어려움.
// ㄴ 사용은 자제하자. 원시적인 배열. >>>>>>>>>> 자료구조 'array'를 사용하자.
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 4:57:06
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] int 1'000개가 파일 "int 천개"에 저장되어있다.
// int값은 글자 형식으로 빈칸으로 구분되어 저장되어 있다.
// int 1000개를 메모리에 저장하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

	// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	// (배열) int ary[1'000] = {};					//contiguous memory
	// 컴파일 시, 크기가 결정되어 있을 때만 사용 가능함. 결정되어 있지 않다면 동적 메모리 사용하기.
	// cout << sizeof(a) << endl; 크기 또한 4000으로 배열과 같음.
	
	array<int, 1000> a;
	
	for (int i = 0; i < 1000; i++) {
		in >> a[i];
	}

	int max = a[0];

	for (int n : a) {						//범위 기반 루프 사용하자.
		cout << format("{:8}", n);
		if (max < n) {
			max = n;
		}
	}

	// 가장 큰 값을 찾아 화면에 출력하라.
	cout << max << endl;
	
	save("소스.cpp");
}

// contiguous memory >> 빈 공간이 없는 메모리라는 뜻.
// continuous << 시간의 연속됨, contiguous << 공간이 연속됨.
// 담고자하는 메모리 그대로만 메모리를 사용함. 탐색을 위한 시간 복잡도 또한 O(1).
// ㄴ 크기 절약, 시간 절약. >> 하지만,,, 추가 및 삭제가 어려움.
// ㄴ 사용은 자제하자. 원시적인 배열. >>>>>>>>>> 자료구조 'array'를 사용하자.
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:01:06
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] int 1'000개가 파일 "int 천개"에 저장되어있다.
// int값은 글자 형식으로 빈칸으로 구분되어 저장되어 있다.
// int 1000개를 메모리에 저장하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

	// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	// (배열) int ary[1'000] = {};					//contiguous memory
	// 컴파일 시, 크기가 결정되어 있을 때만 사용 가능함. 결정되어 있지 않다면 동적 메모리 사용하기.
	// cout << sizeof(a) << endl; 크기 또한 4000으로 배열과 같음.
	
	array<int, 1000> a;
	
	for (int i = 0; i < 1000; i++) {
		in >> a[i];
	}

	// 가장 큰 값을 찾아 화면에 출력하라.
	auto p = max_element(a.begin(), a.end());

	
	save("소스.cpp");
}

// contiguous memory >> 빈 공간이 없는 메모리라는 뜻.
// continuous << 시간의 연속됨, contiguous << 공간이 연속됨.
// 담고자하는 메모리 그대로만 메모리를 사용함. 탐색을 위한 시간 복잡도 또한 O(1).
// ㄴ 크기 절약, 시간 절약. >> 하지만,,, 추가 및 삭제가 어려움.
// ㄴ 사용은 자제하자. 원시적인 배열. >>>>>>>>>> 자료구조 'array'를 사용하자.
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:02:04
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] int 1'000개가 파일 "int 천개"에 저장되어있다.
// int값은 글자 형식으로 빈칸으로 구분되어 저장되어 있다.
// int 1000개를 메모리에 저장하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

	// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	// (배열) int ary[1'000] = {};					//contiguous memory
	// 컴파일 시, 크기가 결정되어 있을 때만 사용 가능함. 결정되어 있지 않다면 동적 메모리 사용하기.
	// cout << sizeof(a) << endl; 크기 또한 4000으로 배열과 같음.
	
	array<int, 1000> a;
	
	for (int i = 0; i < 1000; i++) {
		in >> a[i];
	}

	// 가장 큰 값을 찾아 화면에 출력하라.
	auto p = max_element(a.begin(), a.end());
	cout << *p << endl;
	// p는 주소를 가리킴.
	
	save("소스.cpp");
}

// contiguous memory >> 빈 공간이 없는 메모리라는 뜻.
// continuous << 시간의 연속됨, contiguous << 공간이 연속됨.
// 담고자하는 메모리 그대로만 메모리를 사용함. 탐색을 위한 시간 복잡도 또한 O(1).
// ㄴ 크기 절약, 시간 절약. >> 하지만,,, 추가 및 삭제가 어려움.
// ㄴ 사용은 자제하자. 원시적인 배열. >>>>>>>>>> 자료구조 'array'를 사용하자.
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:04:13
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

// [문제] int 1'000개가 파일 "int 천개"에 저장되어있다.
// int값은 글자 형식으로 빈칸으로 구분되어 저장되어 있다.
// int 1000개를 메모리에 저장하라.

//-------------
int main() 
//-------------
{
	ifstream in{ "int 천개" };

	// 파일 읽지 못할 때 처리할 코드 반드시 적기.
	if (!in) {
		cout << "파일 읽기 실패" << '\n';
		return 0;							//exit(0);
	}

	// (배열) int ary[1'000] = {};					//contiguous memory
	// 컴파일 시, 크기가 결정되어 있을 때만 사용 가능함. 결정되어 있지 않다면 동적 메모리 사용하기.
	// cout << sizeof(a) << endl; 크기 또한 4000으로 배열과 같음.
	
	array<int, 1000> a;
	
	for (int i = 0; i < 1000; i++) {
		in >> a[i];
	}

	// 가장 큰 값을 찾아 화면에 출력하라.
	auto p = max_element(a.begin(), a.end());
	// auto p = min_element(a.begin(), a.end());
	cout << *p << endl;
	// p는 주소를 가리킴.
	
	save("소스.cpp");
}

// contiguous memory >> 빈 공간이 없는 메모리라는 뜻.
// continuous << 시간의 연속됨, contiguous << 공간이 연속됨.
// 담고자하는 메모리 그대로만 메모리를 사용함. 탐색을 위한 시간 복잡도 또한 O(1).
// ㄴ 크기 절약, 시간 절약. >> 하지만,,, 추가 및 삭제가 어려움.
// ㄴ 사용은 자제하자. 원시적인 배열. >>>>>>>>>> 자료구조 'array'를 사용하자.
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:07:48
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;

	cout << "스택에 있는 a[0] - " << addressof(a[0]) << endl;
	cout << "스택에 있는 n - " << addressof(n) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:10:27
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

array<int, 10>ga;
int gn;
// 전역 변수니까 스택 메모리에 위치 Xx
// data 영역에 있음.
//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;

	cout << "스택에 있는 a[0] - " << addressof(a[0]) << endl;
	cout << "스택에 있는 n - " << addressof(n) << endl;
	cout << endl;
	cout << "data에 있는 ga - " << addressof(ga[0]) << endl;
	cout << "data에 있는 gn - " << addressof(gn) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:12:56
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

array<int, 10>ga;
int gn;
// 전역 변수니까 스택 메모리에 위치 Xx
// data 영역에 있음.
//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;

	cout << "스택에 있는 a[0] - " << addressof(a[0]) << endl;
	cout << "스택에 있는 n - " << addressof(n) << endl;
	cout << endl;
	cout << "data에 있는 ga - " << addressof(ga[0]) << endl;
	cout << "data에 있는 gn - " << addressof(gn) << endl;
	cout << endl;
	cout << "코드에 있는 main - " << addressof(main) << endl;
	cout << "코드에 있는 save - " << addressof(save) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:14:38
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

array<int, 10>ga;
int gn;
// 전역 변수니까 스택 메모리에 위치 Xx
// data 영역에 있음.
//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;
	int* p = new int;
	cout << "free store에 있는 p" << p << endl;


	cout << "스택에 있는 a[0] - " << addressof(a[0]) << endl;
	cout << "스택에 있는 n - " << addressof(n) << endl;
	cout << endl;
	cout << "data에 있는 ga - " << addressof(ga[0]) << endl;
	cout << "data에 있는 gn - " << addressof(gn) << endl;
	cout << endl;
	cout << "코드에 있는 main - " << addressof(main) << endl;
	cout << "코드에 있는 save - " << addressof(save) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:14:58
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

array<int, 10>ga;
int gn;
// 전역 변수니까 스택 메모리에 위치 Xx
// data 영역에 있음.
//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;
	int* p = new int;


	cout << "스택에 있는 a[0] - " << addressof(a[0]) << endl;
	cout << "스택에 있는 n - " << addressof(n) << endl;
	cout << endl;
	cout << "free store에 있는 p" << p << endl;
	cout << endl;
	cout << "data에 있는 ga - " << addressof(ga[0]) << endl;
	cout << "data에 있는 gn - " << addressof(gn) << endl;
	cout << endl;
	cout << "코드에 있는 main - " << addressof(main) << endl;
	cout << "코드에 있는 save - " << addressof(save) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:15:37
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

array<int, 10>ga;
int gn;
// 전역 변수니까 스택 메모리에 위치 Xx
// data 영역에 있음.
//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;
	int* p = new int;


	cout << "스택에 있는 a[0] -    " << addressof(a[0]) << endl;
	cout << "스택에 있는 n -       " << addressof(n) << endl;
	cout << endl;
	cout << "free store에 있는 p - " << p << endl;
	cout << endl;
	cout << "data에 있는 ga -      " << addressof(ga[0]) << endl;
	cout << "data에 있는 gn -      " << addressof(gn) << endl;
	cout << endl;
	cout << "코드에 있는 main -    " << addressof(main) << endl;
	cout << "코드에 있는 save -    " << addressof(save) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:18:55
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

array<int, 10>ga{12};
array<int, 10>gㅎa{};
// 초기화 한 전역 변수와 초기화하지 않은 전역 변수는 완전히 다름.
// 저장 위치부터 다름.
int gn;
// 전역 변수니까 스택 메모리에 위치 Xx
// data 영역에 있음.
//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;
	int* p = new int;


	cout << "스택에 있는 a[0] -    " << addressof(a[0]) << endl;
	cout << "스택에 있는 n -       " << addressof(n) << endl;
	cout << endl;
	cout << "free store에 있는 p - " << p << endl;
	cout << endl;
	cout << "data에 있는 ga -      " << addressof(ga[0]) << endl;
	cout << "data에 있는 gn -      " << addressof(gn) << endl;
	cout << endl;
	cout << "코드에 있는 main -    " << addressof(main) << endl;
	cout << "코드에 있는 save -    " << addressof(save) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//

==================================
소스.cpp, 저장 시간: 2023-03-09 목요일 오후 5:19:03
==================================
//-----------------------------------------------------------------------------
// 2023 1학기 STL 3월 7일 목78                화 910 목78               (2주 1일)
//-----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-----------------------------------------------------------------------------
// 코딩 컨벤션 >> 코딩 규칙이 있음.
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <format>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std; //권장하지 않음.

array<int, 10>ga{12};
array<int, 10>gga{};
// 초기화 한 전역 변수와 초기화하지 않은 전역 변수는 완전히 다름.
// 저장 위치부터 다름.
int gn;
// 전역 변수니까 스택 메모리에 위치 Xx
// data 영역에 있음.
//-------------
int main() 
//-------------
{
	array<int, 10> a;
	int n;
	int* p = new int;


	cout << "스택에 있는 a[0] -    " << addressof(a[0]) << endl;
	cout << "스택에 있는 n -       " << addressof(n) << endl;
	cout << endl;
	cout << "free store에 있는 p - " << p << endl;
	cout << endl;
	cout << "data에 있는 ga -      " << addressof(ga[0]) << endl;
	cout << "data에 있는 gn -      " << addressof(gn) << endl;
	cout << endl;
	cout << "코드에 있는 main -    " << addressof(main) << endl;
	cout << "코드에 있는 save -    " << addressof(save) << endl;

	save("소스.cpp");
}

// array<int, 1000> a;
// ㄴ 스택에 생김. 지역 변수니까!
// 
//